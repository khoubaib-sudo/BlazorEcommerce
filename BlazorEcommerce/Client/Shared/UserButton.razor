@inject ILocalStorageService LocalStorge
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager 
<div class="dropdon">
    <button @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            class="btn btn-outline-light dropdown-toggle user-button ">
    <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <hr />
                 <button class="dropdown-item" @onclick="Logout">logout</button>
            </Authorized>
            <NotAuthorized>
                 <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">login</a>
                 <a href="register" class="dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>  
    </div>
</div>
@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }
    private async Task Logout()
    {
        await LocalStorge.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");

    }

}
